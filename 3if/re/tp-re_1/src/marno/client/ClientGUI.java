package marno.client;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;

/**
 * Main Graphical User Interface window for the chat client.
 */
public class ClientGUI extends javax.swing.JFrame {

    /**
     * The window's default title.
     */
    private static final String GUI_TITLE = "MarnoChat";

    /**
     * The attached client (initially null).
     *
     * The client must be attached after the window is created.
     */
    protected Client client = null;

    /**
     * Initializes the window from the ClientGUI form's generated code.
     */
    public ClientGUI() {
        initComponents();

        updateUsername();

        /* Auto scroll down chat */
        DefaultCaret caret = (DefaultCaret) textAreaChat.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * Appends text to the chat area.
     *
     * @param text the text to be added
     */
    public void addChatText(String text) {
        addChatText(text, true);
    }

    /**
     * Adds text to the chat area (either before or after the current content).
     *
     * @param text the text to be added
     * @param append appends the text if true, prepends it otherwise
     */
    public void addChatText(String text, boolean append) {
        if (!text.isEmpty()) {
            if (!textAreaChat.getText().isEmpty()) {
                if (append)
                    textAreaChat.setText(textAreaChat.getText() + "\n" + text);
                else
                    textAreaChat.setText(text + "\n" + textAreaChat.getText());
            } else
                textAreaChat.setText(text);
        }
    }

    /**
     * Sends what is currently stored in the input field as a public message.
     *
     * The input field is reset once the message has been sent.
     */
    private void sendMessage() {
        if (client != null) {
            try {
                client.sendMessageToServer(textFieldMessage.getText());
                textFieldMessage.setText("");
            } catch (Exception e) {
                System.err.println("[Client exception]: " + e.getMessage());
            }
        }
    }

    /**
     * Change the username of the user at top of user list and update the window
     * title.
     */
    private void updateUsername() {
        if (client != null) {
            if (!client.username.isEmpty())
                setTitle(GUI_TITLE + " - " + client.username);
            else
                setTitle(GUI_TITLE);
            labelUsername.setText(client.username);
        }
    }

    /**
     * If the client is connected, try to disconnect it from the server, then
     * update the window. Otherwise, establish a new connection, then update the
     * window.
     */
    public void disconnect() {
        if (client == null) {
            ClientGUIConnect clientGuiConnect = new ClientGUIConnect(this, true);
            clientGuiConnect.setVisible(true);
        } else {
            try {
                client.disconnect();
            } catch (Exception e) {
                System.err.println("[Client exception]: " + e.getMessage());
            } finally {
                client = null;
            }
        }

        if (client == null) {
            menuItemConnection.setText("Connect");
            listUser.setModel(new DefaultListModel());
        } else {
            menuItemConnection.setText("Disconnect");
        }

        updateUsername();
        if (client == null) {
            buttonSend.setEnabled(false);
            listUser.setEnabled(false);
        } else {
            buttonSend.setEnabled(true);
            listUser.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSend = new javax.swing.JButton();
        textFieldMessage = new javax.swing.JTextField();
        scrollPaneChat = new javax.swing.JScrollPane();
        textAreaChat = new javax.swing.JTextArea();
        labelUsername = new javax.swing.JLabel();
        scrollPaneListUser = new javax.swing.JScrollPane();
        listUser = new javax.swing.JList();
        menuBar = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        menuItemConnection = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat MarcArno");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonSend.setText("Send");
        buttonSend.setEnabled(false);
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });

        textFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldMessageKeyReleased(evt);
            }
        });

        scrollPaneChat.setAutoscrolls(true);

        textAreaChat.setEditable(false);
        textAreaChat.setColumns(20);
        textAreaChat.setRows(5);
        scrollPaneChat.setViewportView(textAreaChat);

        labelUsername.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUsername.setText("-");

        listUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listUserMouseClicked(evt);
            }
        });
        scrollPaneListUser.setViewportView(listUser);

        menu.setText("File");

        menuItemConnection.setText("Connect");
        menuItemConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConnectionActionPerformed(evt);
            }
        });
        menu.add(menuItemConnection);

        menuBar.add(menu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldMessage))
                    .addComponent(scrollPaneChat, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneListUser, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(labelUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelUsername)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneListUser))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPaneChat, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSend)
                            .addComponent(textFieldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConnectionActionPerformed
        disconnect();
    }//GEN-LAST:event_menuItemConnectionActionPerformed

    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        sendMessage();
    }//GEN-LAST:event_buttonSendActionPerformed

    private void textFieldMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldMessageKeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            sendMessage();
        }
    }//GEN-LAST:event_textFieldMessageKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (client != null) {
            try {
                client.disconnect();
            } catch (Exception e) {
                System.err.println("[Client exception]: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void listUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listUserMouseClicked
        if (client != null) {
            JList list = (JList) evt.getSource();
            String username = (String) list.getModel().getElementAt(list.locationToIndex(evt.getPoint()));
            if (!username.equals(client.username)) {
                ClientGUIMessage clientGuiPrivate = new ClientGUIMessage(this, true, username);
                clientGuiPrivate.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Can't send private message to yourself!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_listUserMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSend;
    private javax.swing.JLabel labelUsername;
    public javax.swing.JList listUser;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemConnection;
    private javax.swing.JScrollPane scrollPaneChat;
    private javax.swing.JScrollPane scrollPaneListUser;
    public javax.swing.JTextArea textAreaChat;
    private javax.swing.JTextField textFieldMessage;
    // End of variables declaration//GEN-END:variables

}
