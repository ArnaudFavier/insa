#ifndef CITY_H
#define CITY_H

#include "config.h"
#include "HashTable.h"
#include "Sensor.h"

/** Manages the city's sensors and associated events.
 *
 * Provides statistics based on the events which are added to it.
 */
class City {
public:
    /** Initializes the city to a default state.
     *
     * A city can hold up to 20,000,000 events and 1,500 sensors; events must
     * be added in chronological order and take place between may and
     * september 2015.
     */
    City();

    /** Destructs the city.
     */
    virtual ~City();

    /** Adds a new sensor event to the list of registered events.
     *
     * Events are generated by sensors placed throughout the city. Each event
     * needs an associated sensor ID, a timestamp and the state recorded by the
     * sensor.
     * @param sensorId the ID of the sensor which generated the event
     * @param state the event's associated state (from 0 to 3)
     * @param month the month of the year (from 0 to 4)
     * @param day the day of the month (from 0 to 30)
     * @param hour the hour of the day (from 0 to 23)
     * @param minute the minute of the hour (from 0 to 59)
     * @param day7 the day of the week (from 0 to 6)
     */
    void addEvent(unsigned int sensorId, unsigned short state,
                  unsigned short month, unsigned short day, unsigned short hour,
                  unsigned short minute, unsigned short day7);

    /** Displays the traffic state stats for a specific sensor.
     *
     * @param sensorId the ID of the sensor
     */
    void displaySensorStateStats(unsigned int sensorId) const;

    /** Displays how much time was spent in a traffic jam, per hour and per week
     * day.
     *
     * Each stat represents the total amount of traffic jams for to that
     * hour divided by the total number of events.
     * @param day7 the day of the week (from 0 to 6)
     */
    void displayDayTrafficJamStats(unsigned short day7) const;

    /** Displays the traffic state stats for a day of the week.
     *
     * @param day7 the day of the week (from 0 to 6)
     */
    void displayDayStateStats(unsigned short day7) const;

    /** Displays the optimal time to leave on a certain journey.
     *
     * NOT IMPLEMENTED
     * @param day7 the day of the week (from 0 to 6)
     * @param hStart the starting hour of the time range (from 0 to 23)
     * @param hEnd the ending hour of the time range (from hStart to 23)
     * @param segCount the number of segments
     * @param segments the list of sensor ID's constituting the journey
     */
    void displayOptimalDepartureTime(
            unsigned short day7, unsigned short hStart, unsigned short hEnd,
            unsigned int segCount, unsigned int segments[]) const;

protected:
    /** An array of segmented tables of events, sorted by day of the week.
     *
     * Each segmented table lists all the events which took place on that day
     * of the week.
     */
    SegmentedTable<Event>* events[NUM_DAYS];

    /** The current number of created sensors. */
    unsigned short numSensors;

    /** A hash table of sensor indices, for quick access.
     *
     * Allows for quick conversion from sensor ID to sensor index, to quickly
     * retrieve a sensor object.
     */
    HashTable* sensorIndices;

    /** An array of sensors, in the order in which they were added. */
    Sensor* sensors[MAX_SENSORS];

    /** Adds a new sensor to the array of sensors and returns its new index.
     *
     * @param sensorId the ID of the sensor
     * @return the new sensor's index in the table
     */
    unsigned short addSensor(unsigned int sensorId);

    /** Gets a sensor by its ID.
     *
     * @param sensorId the ID of the sensor to retrieve
     * @return the sensor with a matching ID (or null if not found)
     */
    Sensor* getSensor(unsigned int sensorId) const;
};

/** Rounds a floating-point number to the nearest integer.
 *
 * Half-way values (those ending in .5) are rounded down.
 * @param n the floating-point number to round
 * @return the rounded value
 */
unsigned int round(float n);

#endif // CITY_H
