-- Informations de connexion à distance
-- Host Local Port Forward : if-oracle02
-- SID : DB2

CREATE DATABASE LINK CENTRAL
CONNECT TO afavier IDENTIFIED BY arnaud
USING 'DB1';

CREATE DATABASE LINK EUS
CONNECT TO afavier IDENTIFIED BY arnaud
USING 'DB3';

CREATE DATABASE LINK A
CONNECT TO afavier IDENTIFIED BY arnaud
USING 'DB4';

-- SUPPRESSION --
DROP TABLE CLIENTS_EuN CASCADE CONSTRAINTS;
DROP TABLE CLIENTS_O CASCADE CONSTRAINTS;
DROP TABLE COMMANDES_EuN CASCADE CONSTRAINTS;
DROP TABLE COMMANDES_O CASCADE CONSTRAINTS;
DROP TABLE DETAILS_COMMANDES_EuN CASCADE CONSTRAINTS;
DROP TABLE DETAILS_COMMANDES_O CASCADE CONSTRAINTS;
DROP TABLE FOURNISSEURS CASCADE CONSTRAINTS;
DROP TABLE STOCK_EuN CASCADE CONSTRAINTS;
DROP TABLE STOCK_O CASCADE CONSTRAINTS;

-- LISTE DES PAYS --
DROP TABLE PAYS_CONTINENT;
CREATE TABLE PAYS_CONTINENT (
  PAYS VARCHAR2(15 BYTE), 
  CONTINENT VARCHAR2(3 BYTE)
);
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Pologne','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Norvege','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Suede','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Danemark','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Islande','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Finlande','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Royaume-Uni','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Irlande','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Belgique','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Luxembourg','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Pays-Bas','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Allemagne','EuN');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Espagne','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Portugal','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Andorre','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('France','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Gibraltar','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Italie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Saint-Marin','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Vatican','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Malte','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Albanie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Croatie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Grece','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Macedoine','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Montenegro','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Serbie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Slovenie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Bulgarie','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Argentine','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Bahamas','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Barbade','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Belize','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Bolivie','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Bresil','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Canada','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Chili','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Colombie','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('CostaRica','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Cuba','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Dominique','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Equateur','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Etats-Unis','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Grenade','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Guatemala','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Guyana','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Haiti','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Honduras','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Jamaique','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Mexique','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Nicaragua','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Panama','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Paraguay','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Perou','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Sainte-Lucie','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Salvador','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Suriname','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Uruguay','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Venezuela','A');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Suisse','EuS');
INSERT INTO PAYS_CONTINENT (PAYS,CONTINENT) VALUES ('Autriche','EuS');

-- CREATION --
CREATE TABLE CLIENTS_EuN AS
(
SELECT *
  FROM RYORI.CLIENTS@CENTRAL ry
  WHERE ry.PAYS IN (
    SELECT pc.PAYS
      FROM PAYS_CONTINENT pc
      WHERE pc.CONTINENT LIKE 'EuN'
  )
);

CREATE TABLE CLIENTS_O AS
(
SELECT *
  FROM RYORI.CLIENTS@CENTRAL ry
  WHERE ry.PAYS IS NULL OR ry.PAYS NOT IN (
    SELECT pc.PAYS FROM PAYS_CONTINENT pc
  )
);

CREATE TABLE COMMANDES_EuN AS
(
SELECT ryco.*
  FROM RYORI.COMMANDES@CENTRAL ryco, RYORI.CLIENTS@CENTRAL rycl
  WHERE ryco.CODE_CLIENT LIKE rycl.CODE_CLIENT AND rycl.PAYS IN (
    SELECT pc.PAYS
      FROM PAYS_CONTINENT pc
      WHERE pc.CONTINENT LIKE 'EuN'
  )
);

CREATE TABLE COMMANDES_O AS
(
SELECT ryco.*
  FROM RYORI.COMMANDES@CENTRAL ryco, RYORI.CLIENTS@CENTRAL rycl
  WHERE ryco.CODE_CLIENT LIKE rycl.CODE_CLIENT AND (
    rycl.PAYS IS NULL OR rycl.PAYS NOT IN (
      SELECT pc.PAYS FROM PAYS_CONTINENT pc
    )
  )
);

CREATE TABLE DETAILS_COMMANDES_EuN AS
(
SELECT ryde.*
  FROM RYORI.DETAILS_COMMANDES@CENTRAL ryde, RYORI.COMMANDES@CENTRAL ryco, RYORI.CLIENTS@CENTRAL rycl
  WHERE ryde.NO_COMMANDE LIKE ryco.CODE_CLIENT AND ryco.CODE_CLIENT LIKE rycl.CODE_CLIENT AND rycl.PAYS IN (
    SELECT pc.PAYS
      FROM PAYS_CONTINENT pc
      WHERE pc.CONTINENT LIKE 'EuN'
  )
);

CREATE TABLE DETAILS_COMMANDES_O AS
(
SELECT ryde.*
  FROM RYORI.DETAILS_COMMANDES@CENTRAL ryde, RYORI.COMMANDES@CENTRAL ryco, RYORI.CLIENTS@CENTRAL rycl
  WHERE ryde.NO_COMMANDE LIKE ryco.CODE_CLIENT AND ryco.CODE_CLIENT LIKE rycl.CODE_CLIENT AND (
    rycl.PAYS IS NULL OR rycl.PAYS NOT IN (
      SELECT pc.PAYS FROM PAYS_CONTINENT pc
    )
  )
);

CREATE TABLE FOURNISSEURS AS (SELECT * FROM RYORI.FOURNISSEURS@CENTRAL ry);

CREATE TABLE STOCK_EuN AS
(
SELECT *
  FROM RYORI.STOCK@CENTRAL ry
  WHERE ry.PAYS IN (
    SELECT pc.PAYS
      FROM PAYS_CONTINENT pc
      WHERE pc.CONTINENT LIKE 'EuN'
  )
);

CREATE TABLE STOCK_O AS
(
SELECT *
  FROM RYORI.STOCK@CENTRAL ry
  WHERE ry.PAYS IS NULL OR ry.PAYS NOT IN (
    SELECT pc.PAYS FROM PAYS_CONTINENT pc
  )
);

-- CONTRAINTES --
ALTER TABLE CLIENTS_EuN ADD CONSTRAINT PK_CLIENTS_EuN PRIMARY KEY (CODE_CLIENT);
ALTER TABLE CLIENTS_O ADD CONSTRAINT PK_CLIENTS_O PRIMARY KEY (CODE_CLIENT);
ALTER TABLE COMMANDES_EuN ADD CONSTRAINT PK_COMMANDES_EuN PRIMARY KEY (NO_COMMANDE);
ALTER TABLE COMMANDES_O ADD CONSTRAINT PK_COMMANDES_O PRIMARY KEY (NO_COMMANDE);
ALTER TABLE DETAILS_COMMANDES_EuN ADD CONSTRAINT PK_DETAILS_COMMANDES_EuN PRIMARY KEY (NO_COMMANDE, REF_PRODUIT);
ALTER TABLE DETAILS_COMMANDES_O ADD CONSTRAINT PK_DETAILS_COMMANDES_O PRIMARY KEY (NO_COMMANDE, REF_PRODUIT);
ALTER TABLE FOURNISSEURS ADD CONSTRAINT PK_FOURNISSEURS PRIMARY KEY (NO_FOURNISSEUR) ;

ALTER TABLE COMMANDES_EuN
  ADD CONSTRAINT FK_COMMANDES_EuN_CLIENTS_EuN
  FOREIGN KEY (CODE_CLIENT) REFERENCES CLIENTS_EuN (CODE_CLIENT);

ALTER TABLE COMMANDES_O
  ADD CONSTRAINT FK_COMMANDES_O_CLIENTS_O
  FOREIGN KEY (CODE_CLIENT) REFERENCES CLIENTS_O (CODE_CLIENT);

ALTER TABLE DETAILS_COMMANDES_EuN
  ADD CONSTRAINT FK_DETAILS_EuN_COMMANDES_EuN
  FOREIGN KEY (NO_COMMANDE) REFERENCES COMMANDES_EuN (NO_COMMANDE);

ALTER TABLE DETAILS_COMMANDES_O
  ADD CONSTRAINT FK_DETAILS_O_COMMANDES_O
  FOREIGN KEY (NO_COMMANDE) REFERENCES COMMANDES_O (NO_COMMANDE);


-- TRIGGERS --
-- Trigger Commandes_EuN vers Employes
CREATE OR REPLACE TRIGGER TR_COMMANDES_EuN_EMPLOYES_INSE
BEFORE INSERT ON COMMANDES_EuN
FOR EACH ROW
DECLARE
  nbEmp int;
BEGIN
  SELECT COUNT(*) INTO nbEmp FROM OSTEIN.EMPLOYES@A WHERE NO_EMPLOYE=:NEW.NO_EMPLOYE;
  IF (nbEmp=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'EMPLOYE INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_COMMANDES_EuN_EMPLOYES_UPDA
BEFORE UPDATE ON COMMANDES_EuN
FOR EACH ROW
BEGIN
  IF (:OLD.NO_EMPLOYE!=:NEW.NO_EMPLOYE) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LE NUMERO D UN EMPLOYE');
  END IF;
END;
/

-- Trigger Commandes_O vers Employes
CREATE OR REPLACE TRIGGER TR_COMMANDES_O_EMPLOYES_INSERT
BEFORE INSERT ON COMMANDES_O
FOR EACH ROW
DECLARE
  nbEmp int;
BEGIN
  SELECT COUNT(*) INTO nbEmp FROM OSTEIN.EMPLOYES@A WHERE NO_EMPLOYE=:NEW.NO_EMPLOYE;
  IF (nbEmp=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'EMPLOYE INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_COMMANDES_O_EMPLOYES_UPDATE
BEFORE UPDATE ON COMMANDES_O
FOR EACH ROW
BEGIN
  IF (:OLD.NO_EMPLOYE!=:NEW.NO_EMPLOYE) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LE NUMERO D UN EMPLOYE');
  END IF;
END;
/

-- Trigger DetailCommande_EuN vers Produits
CREATE OR REPLACE TRIGGER TR_DETAILS_C_EuN_PRODUITS_INSE
BEFORE INSERT ON DETAILS_COMMANDES_EuN
FOR EACH ROW
DECLARE
  nbProduit int;
BEGIN
  SELECT COUNT(*) INTO nbProduit FROM OVICENTE.PRODUITS@EUS WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
  IF (nbProduit=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'PRODUIT INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_DETAILS_C_EuN_PRODUITS_UPDA
BEFORE UPDATE ON DETAILS_COMMANDES_EuN
FOR EACH ROW
BEGIN
  IF (:OLD.REF_PRODUIT!=:NEW.REF_PRODUIT) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LA REFERENCE D UN PRODUIT');
  END IF;
END;
/

-- Trigger DetailCommande_O vers Produits
CREATE OR REPLACE TRIGGER TR_DETAILS_C_O_PRODUITS_INSERT
BEFORE INSERT ON DETAILS_COMMANDES_O
FOR EACH ROW
DECLARE
  nbProduit int;
BEGIN
  SELECT COUNT(*) INTO nbProduit FROM OVICENTE.PRODUITS@EUS WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
  IF (nbProduit=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'PRODUIT INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_DETAILS_C_O_PRODUITS_UPDATE
BEFORE UPDATE ON DETAILS_COMMANDES_O
FOR EACH ROW
BEGIN
  IF (:OLD.REF_PRODUIT!=:NEW.REF_PRODUIT) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LA REFERENCE D UN PRODUIT');
  END IF;
END;
/

-- Trigger Stock_EuN vers Produits
CREATE OR REPLACE TRIGGER TR_STOCK_EuN_PRODUITS_INSERT
BEFORE INSERT ON STOCK_EuN
FOR EACH ROW
DECLARE
  nbProduit int;
BEGIN
  SELECT COUNT(*) INTO nbProduit FROM OVICENTE.PRODUITS@EUS WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
  IF (nbProduit=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'PRODUIT INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_STOCK_EuN_PRODUITS_UPDATE
BEFORE UPDATE ON STOCK_EuN
FOR EACH ROW
BEGIN
  IF (:OLD.REF_PRODUIT!=:NEW.REF_PRODUIT) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LA REFERENCE D UN PRODUIT');
  END IF;
END;
/

-- Trigger Stock_O vers Produits
CREATE OR REPLACE TRIGGER TR_FK_STOCK_O_PRODUITS_INSERT
BEFORE INSERT ON STOCK_O
FOR EACH ROW
DECLARE
  nbProduit int;
BEGIN
  SELECT COUNT(*) INTO nbProduit FROM OVICENTE.PRODUITS@EUS WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
  IF (nbProduit=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'PRODUIT INCONNU');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_FK_STOCK_O_PRODUITS_UPDATE
BEFORE UPDATE ON STOCK_O
FOR EACH ROW
BEGIN
  IF (:OLD.REF_PRODUIT!=:NEW.REF_PRODUIT) THEN
    RAISE_APPLICATION_ERROR(-20003, 'IMPOSSIBLE DE MODIFIE LA REFERENCE D UN PRODUIT');
  END IF;
END;
/

-- Trigger Delete Fournisseur
CREATE OR REPLACE TRIGGER TR_FK_FOURNISSEURS_PRODUITS
BEFORE DELETE ON FOURNISSEURS
FOR EACH ROW
DECLARE
  nbProduit int;
BEGIN
  SELECT COUNT(*) INTO nbProduit FROM OVICENTE.PRODUITS@EUS WHERE NO_FOURNISSEUR=:NEW.NO_FOURNISSEUR;
  IF (nbProduit>0) THEN
    RAISE_APPLICATION_ERROR(-20003, 'FOURNISSEUR ENCORE UTILISE');
  END IF;
END;
/
  
-- PRIVILEGES --
GRANT ALL ON CLIENTS_EuN TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON CLIENTS_O TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON COMMANDES_EuN TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON COMMANDES_O TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON DETAILS_COMMANDES_EuN TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON DETAILS_COMMANDES_O TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON FOURNISSEURS TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON STOCK_EuN TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON STOCK_O TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;
GRANT ALL ON PAYS_CONTINENT TO MGAGNE, APAYAN1, OSTEIN, OVICENTE, NSORIN;

-- VUE GLOBALE
CREATE OR REPLACE VIEW VIEW_GLOBAL_CLIENTS
(code_client, societe, adresse, ville, code_postal, pays, telephone, fax)
AS
(
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM OSTEIN.Clients_A@A)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM AFAVIER.Clients_O)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM OVICENTE.Clients_EuS@EuS)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM AFAVIER.Clients_EuN)
);
CREATE OR REPLACE SYNONYM Clients FOR VIEW_GLOBAL_CLIENTS;

CREATE OR REPLACE VIEW VIEW_GLOBAL_COMMANDES
(no_commande, code_client, no_employe, date_commande, date_envoi, port)
AS
(
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM OSTEIN.Commandes_A@A)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM AFAVIER.Commandes_O)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM OVICENTE.Commandes_EuS@EuS)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM AFAVIER.Commandes_EuN)
);
CREATE OR REPLACE SYNONYM Commandes FOR VIEW_GLOBAL_COMMANDES;

CREATE OR REPLACE VIEW VIEW_GLOBAL_DETAILS_COMMANDES
(no_commande, ref_produit, prix_unitaire, quantite, remise)
AS
(
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM OSTEIN.Details_Commandes_A@A)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM AFAVIER.Details_Commandes_O)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM OVICENTE.Details_Commandes_EuS@EuS)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM AFAVIER.Details_Commandes_EuN)
);
CREATE OR REPLACE SYNONYM Details_Commandes FOR VIEW_GLOBAL_DETAILS_COMMANDES;

CREATE OR REPLACE VIEW VIEW_GLOBAL_STOCK
(ref_produit, pays, unites_stock, unites_commandees, indisponible)
AS
(
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM OSTEIN.Stock_A@A)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM AFAVIER.Stock_O)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM OVICENTE.Stock_EuS@EuS)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM AFAVIER.Stock_EuN)
);
CREATE OR REPLACE SYNONYM Stock FOR VIEW_GLOBAL_STOCK;

-- Question 3

select * from clients;
select * from clients where pays in ( 'Allemagne' , 'Royaume-Uni' );
select * from clients_eun; -- pour le continent Amériques, respectivement EuN et EuS.